tag=$tag





cd $WORKSPACE && git tag
#!/bin/bash

# Main
# if [ $# -ne 1 ]; then
#      echo "Usage: `basename $0` <tag>"
#      exit 1
# fi
# cd /home/jenkins/jobs/transformer_qa_resource/workspace
# git tag

END_TAG=$tag

# read -p "update client resource to resource server - ${END_TAG} ?(y to continue, else to quit):" is_continue

# if [ "x$is_continue" != "xy" ]; then
#     exit 1
# fi


#WORK_DIR=$(cd "$(dirname "$0")"; pwd)
WORK_DIR=$WORKSPACE
RES_DIR="${WORK_DIR}/client_resource"
TEMP_DIR="${WORK_DIR}/temp"
# WORK_DIR=/tmp
# RES_DIR=/tmp/client_resource
# TEMP_DIR=/tmp/temp

mkdir -p $RES_DIR
rm -rf $RES_DIR/*

HOST="192.168.1.228"
USER="admin"

DEST_DIR="/data/sites/dancer_tw_rg/logs/client_versions"
GIT_REPO_PATH=$WORKSPACE

cd $GIT_REPO_PATH
echo "GIT_REPO_PATH:", $GIT_REPO_PATH
# 先删除所有本地的 tag
git tag -l | xargs git tag -d

# 清除所有的 JSON 和 ZIP 包，避免 TAG 删除的情况存在
rm -f $RES_DIR/*.json
#rm -f $RES_DIR/*.zip
rm -f $RES_DIR/*.txt

# 从远端服务器获取最新的内容
git fetch --prune --all --tags
# From 119.161.137.199:transformer/transformer_res_tencent
# 判断 END_TAG 是否存在  v1.1834
flag_is_exist=`git tag -l | grep $END_TAG `

echo "flag_is_exist is ${flag_is_exist}"

if [ "$flag_is_exist" != "$END_TAG" ]; then
    echo ""
    echo "${END_TAG} is not exists! - ${flag_is_exist}"
    echo "Update fail!"
    echo ""
    exit 1
fi

git checkout $END_TAG
# v1
TAG_PREFIX=${END_TAG:0:2}

echo "TAG_PREFIX: " ${TAG_PREFIX}

CON_STR="_"
echo "con_string: " ${CON_STR}

# 获取 TAG 列表
TAG_LIST=`git tag -l 'r*.*.*.*'| grep "^${TAG_PREFIX}" |sort -r |head -n 30`

for i in $TAG_LIST
do
    echo $i
    echo date

    if [ "x$i" == "x$END_TAG" ]; then
        JSON_CONTENT="{\"different_files\":[],\"current_version\":\"${END_TAG}\",\"sum_size\":0}"
        echo $JSON_CONTENT > $RES_DIR/$i
#        echo $JSON_CONTENT > $RES_DIR/$i
        continue                  # here, same as break
    fi

    #DIFFERENT_FILE="${i}.zip"
    #JSON_CONTENT="{\"different_files\":[\"$DIFFERENT_FILE\"],\"current_version\":\"$END_TAG\",\"sum_size\":0}"
    ## JSON_CONTENT="{\"different_files\":["

    #echo $JSON_CONTENT > $RES_DIR/$i

    echo $i
    # 发布的tag小于当前循环tag 时直接退出循环
    a=${END_TAG:3:7}
    b=${i:3:7}

    echo $a
    echo $b

    if [[ "$a" < "$b" ]]; then
    	echo "continue_for..... "
    	break
    fi

    TEMP_ZIP_DIR="${TEMP_DIR}/${i}"

    mkdir -p $TEMP_ZIP_DIR

    FILE_LIST=`git diff --name-only ${i} ${END_TAG} `
    for file in $FILE_LIST
    do
        FULL_RES_FILE=${GIT_REPO_PATH}/${file}
        if [ ! -f ${FULL_RES_FILE} ]; then
            #echo "no file: " $FULL_RES_FILE
            continue
        fi
        short_path=${file#appstore/}
        # echo "\"$short_path\"," >> $RES_DIR/$i

        echo "file:" $file >> $RES_DIR/$i.txt
        #cp $FULL_RES_FILE $TEMP_ZIP_DIR
        # linux
        # cp -f --parents $file $TEMP_ZIP_DIR

        # mac
        parent_dir_name=`dirname $short_path`
        # mkdir -p $RES_DIR/$parent_dir_name
        mkdir -p $TEMP_ZIP_DIR/$parent_dir_name

        # cp -P $file $RES_DIR/$parent_dir_name
        cp -P $file $TEMP_ZIP_DIR/$parent_dir_name
    done

    # echo "],\"current_version\":\"$END_TAG\",\"sum_size\":0},\"user_status\":{}}" >> $RES_DIR/$i

    cd $TEMP_ZIP_DIR
    rm -rf $RES_DIR/$END_TAG$CON_STR$i.zip
    
    /usr/bin/zip -r $RES_DIR/$END_TAG$CON_STR$i.zip .

    md5_value=`md5sum $RES_DIR/$END_TAG$CON_STR$i.zip |awk '{print $1}'`
    # mac
    # md5_value=`md5 $RES_DIR/$i.zip|awk '{print $NF}'`
    DIFFERENT_FILE="${END_TAG}${CON_STR}${i}.zip"
    JSON_CONTENT="{\"different_files\":[\"$DIFFERENT_FILE\"], \"md5\": \"$md5_value\", \"current_version\":\"$END_TAG\",\"sum_size\":0}"
    echo $JSON_CONTENT > $RES_DIR/$i
#    echo $JSON_CONTENT > $RES_DIR/$i

    cd $GIT_REPO_PATH
    rm -rf $TEMP_ZIP_DIR

done

# rm -f $RES_DIR/Resources/lua/game_version_config.lua

# /usr/bin/rsync -a -z --progress $RES_DIR/ $USER@$HOST:$DEST_DIR/

echo "Update Resource Done!"





function rsync_res
{
    #lr_version_path=$1
	#cd $WORKSPACE
    #git fetch --all
    #git checkout $tag
    #git --git-dir=$WORKSPACE/.git --work-tree=$WORKSPACE fetch --tags
    
    rsync -rlIz --progress --delete --exclude='client_versions' --exclude='README.md' --exclude='.git' $WORKSPACE/ admin@192.168.1.228:$lr_version_path && date && echo "client resource version file $target deployed";
}

function rsync_version
{
	version_path=$1
	# rsync -rlIz --progress --delete $WORKSPACE"/client_resource" admin@192.168.1.228:$version_path && date && echo "client resource version file $target deployed";
    rsync -rlIz --progress --delete $RES_DIR/ admin@192.168.1.44:$version_path && date && echo "client resource version file $target deployed";
    rsync -rlIz --progress --exclude='*.zip' --exclude='*.txt' --delete $RES_DIR/ admin@192.168.1.75:$version_path && date && echo "client resource version file $target deployed";
}

case $deploy_server in
    stg_all)
        #rsync_res "/data/sites/genesis_test_qiku/logs/lr"
        #rsync_res "/data/sites/genesis_test_android/logs/lr"
        # rsync_version "/data/sites/genesis_test_qiku/logs/client_versions"
		rsync_version "/data/sites/genesis_test_android/logs/client_versions"
    ;;
    stg_pub)
        #rsync_res "/data/sites/genesis_test_android/logs/lr"
		rsync_version "/data/sites/genesis_test_android/logs/client_versions"
    ;;
    stg_qiku)
        #rsync_res "/data/sites/genesis_test_qiku/logs/lr"
        rsync_version "/data/sites/genesis_test_qiku/logs/client_versions"
    ;;
esac

# rm -rf $WORKSPACE"/client_versions"